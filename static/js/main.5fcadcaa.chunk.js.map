{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","role","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","words","split","length","style","color","heading","backgroundColor","value","placeholder","onChange","event","target","rows","newTxt","toUpperCase","showAlert","toLowerCase","copiedTxt","document","getElementById","select","navigator","clipboard","writeText","newText","join","wordCounter","word","time","toFixed","estTime","defaultProps","Alert","alert","str","charAt","slice","caps","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5fcadcaa.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n                        </li>\r\n                        {/* <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">About</a>\r\n                        </li> */}\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n                    <div className={`form-check form-switch text-${props.mode === \"dark\" ? \"light\" : \"dark\"}`}>\r\n                        <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\nNavbar.propTypes = {\r\n    title: PropTypes.string\r\n}\r\nNavbar.defaultProps = {\r\n    title: \"Set Title\"\r\n}","import React, { useState } from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const upperCaseHandle = () => {\r\n        // console.log(\"upperCaseHandle was clicked.\");\r\n        let newTxt = text.toUpperCase(); // we declare a let variable because we can't perform this action into setText function\r\n        setText(newTxt);\r\n        props.showAlert(\"Converted to uppercase\", \"success\");\r\n    }\r\n\r\n    const lowerCaseHandle = () => {\r\n        // console.log(\"upperCaseHandle was clicked.\");\r\n        let newTxt = text.toLowerCase(); // we declare a let variable because we can't perform this action into setText function\r\n        setText(newTxt);\r\n        props.showAlert(\"Converted to lowercase\", \"success\");\r\n    }\r\n\r\n    const clearHandle = () => {\r\n        setText(\"\");\r\n        props.showAlert(\"Text cleared\", \"success\");\r\n    }\r\n\r\n    const copyHandle = () => {\r\n        let copiedTxt = document.getElementById(\"myTxtBox\");\r\n        copiedTxt.select();\r\n        // navigator.clipboard.writeText = text;\r\n        navigator.clipboard.writeText(copiedTxt.value);\r\n        props.showAlert(\"Copied to clipboard\", \"success\");\r\n    }\r\n\r\n    const extraSpacesHandle = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed\", \"success\");\r\n    }\r\n\r\n    const onchangeHandler = (event) => {\r\n        // console.log(\"onchangeHandler triggered.\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    /* const [text, setText] = useState(\"Enter text here\"); */ /* Here text is used as a state variable.\r\n                                                            setText is used as a callback function\r\n                                                            because we can't change a state variable\r\n                                                            directly.\r\n                                                            we use const because we want to read the\r\n                                                            variable from anywhere.\r\n                                                         */\r\n    const [text, setText] = useState(\"\");\r\n\r\n    let words = text.split(\" \").length;\r\n\r\n    function wordCounter() {\r\n        let words = text.split(\" \").length;\r\n        if (text === \"\") {\r\n            return 0;\r\n        } else {\r\n            return words;\r\n        }\r\n    }\r\n\r\n    function estTime(word) {\r\n        let time = 0.48 * (word - 1);\r\n        if (time > 60) {\r\n            return (time / 60).toFixed(2) + \" Minutes\";\r\n        } else {\r\n            return time.toFixed(2) + \" Seconds\";\r\n        }\r\n    }\r\n    // let time = estTime(words);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{ color: props.mode === \"dark\" ? \"#FFF\" : \"#212529e5\" }}>\r\n                <h1> {props.heading} </h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" style={{\r\n                        backgroundColor: props.mode === \"dark\" ? \"#212529e5\" : \"#FFF\",\r\n                        color: props.mode === \"dark\" ? \"#FFF\" : \"#212529e5\"\r\n                    }} value={text} placeholder=\"Enter your text here\" onChange={onchangeHandler} id=\"myTxtBox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary my-1 mx-1\" onClick={upperCaseHandle}>CONVERT TO UPPERCASE</button>\r\n                <button className=\"btn btn-primary my-1 mx-1\" onClick={lowerCaseHandle}>convert to lowercase</button>\r\n                <button className=\"btn btn-primary my-1 mx-1\" onClick={clearHandle}>Clear</button>\r\n                <button className=\"btn btn-primary my-1 mx-1\" onClick={copyHandle}>Copy Text</button>\r\n                <button className=\"btn btn-primary my-1 mx-1\" onClick={extraSpacesHandle}>Remove Extra Spaces</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{ color: props.mode === \"dark\" ? \"#FFF\" : \"#212529e5\" }}>\r\n                <h2>Text summery</h2>\r\n                <hr />\r\n                <b>{wordCounter()} Words {text.length} Characters</b>\r\n                <br />\r\n                <b>{estTime(words)} need to read</b>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const caps = (word) => {\r\n        let str = word.toLowerCase();\r\n        return str.charAt(0).toUpperCase() + str.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div>\r\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{caps(props.alert.type)}</strong>: {props.alert.msg}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar'\nimport React, { useState } from 'react'\nimport TextForm from './components/TextForm'\nimport Alert from './components/Alert';\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    });\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#212529e5\";\n      showAlert(\"Dark mode enabled\", \"success\");\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"#FFF\";\n      showAlert(\"Light mode enabled\", \"success\");\n    }\n  }\n  return (\n    <>\n      {/* <Navbar title='TextUtils' /> */}\n      <Navbar title='TextUtils' mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        <TextForm heading=\"Enter Text To Manipulate\" showAlert={showAlert} mode={mode} />\n      </div>\n      {/* <About /> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}